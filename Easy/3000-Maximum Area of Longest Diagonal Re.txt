//Maximum Area of Longest Diagonal Rectangle

//Approach 1
class Solution {
    public int areaOfMaxDiagonal(int[][] dimensions) {
        int n = dimensions.length;
        Map<Integer, Double> map = new HashMap<>();
        double max = 0;

        for(int i = 0; i < n; i++) {
            int length = dimensions[i][0];
            int width = dimensions[i][1];
            double diagonal = Math.sqrt(length * length + width * width);
            
            map.put(i, diagonal);
        }

        int area = 0;
        for(int key : map.keySet()) {
            if(map.get(key) > max) {
                max = map.get(key);
                area = dimensions[key][0] * dimensions[key][1];
            }
            else if(map.get(key) == max) {
                area = Math.max(area, dimensions[key][0] * dimensions[key][1]);
            }
        }

        return area;
    }
}

//Approach 2
class Solution {
    public int areaOfMaxDiagonal(int[][] dimensions) {
        int n = dimensions.length;
        int maxDiagonal = Integer.MIN_VALUE;
        int maxArea = 0;

        for(int i = 0; i < n; i++){
            int l = dimensions[i][0];
            int w = dimensions[i][1];

            int diagonal = l * l + w * w;
            int area = l * w;

            if(diagonal > maxDiagonal) {
                maxDiagonal = diagonal;
                maxArea = area;
            }
            else if(diagonal == maxDiagonal && area > maxArea) {
                maxArea = area;
            }
        }

        return maxArea;
    }
}
