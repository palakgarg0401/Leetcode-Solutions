//Balanced Binary Tree

//Approach 1
class Solution {
    private int getHeight(TreeNode root){
        if(root == null) return 0;
        return Math.max(getHeight(root.left), getHeight(root.right)) + 1;
    }
    public boolean isBalanced(TreeNode root) {
        if(root == null) return true;

        if(!isBalanced(root.left) || !isBalanced(root.right)) return false;
        
        int leftHeight = getHeight(root.left);
        int rightHeight= getHeight(root.right);

        return Math.abs(leftHeight - rightHeight) <= 1;
    }
}


//Approach 2
class Solution {
    private int check(TreeNode root){
        if(root == null) return 0;
        int left = check(root.left);
        if(left == -1) return -1;
        int right = check(root.right);
        if(right == -1) return -1;
        if(Math.abs(left - right) > 1) return -1;

        return 1 + Math.max(left, right);
    }
    public boolean isBalanced(TreeNode root) {
        return check(root) != -1;
    }
}