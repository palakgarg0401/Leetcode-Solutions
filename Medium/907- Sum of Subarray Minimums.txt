// Sum of Subarray Minimums

// Approach 1 (Brute Force) -> TLE
class Solution {
    public int sumSubarrayMins(int[] arr) {
        long sum = 0;
        int mod = 1000000007;
        for(int i = 0; i < arr.length; i++){
            int min = arr[i];
            sum = (sum + min) % mod;
            for(int j = i+1; j < arr.length; j++){
                min = Math.min(min, arr[j]);
                sum = (sum + min) % mod;
            }
        }

        return (int)sum;
    }
}

// Approach 2
class Solution {
    public int sumSubarrayMins(int[] arr) {
        int[] nse = findNSE(arr);
        int[] pse = findPSE(arr);
        long sum = 0;
        int mod = 1000000007;
        for(int i = 0; i < arr.length; i++){
            int left = i - pse[i];
            int right = nse[i] - i;

            sum = (sum + (left * right * 1L * arr[i]) % mod) %mod; 
        }
        
        return (int)sum;
    }
    private int[] findNSE(int[] arr){
        int[] nse = new int[arr.length];
        Stack<Integer> stack = new Stack<>();

        for(int i = arr.length - 1; i >= 0; i--){
            while(!stack.isEmpty() && arr[stack.peek()] > arr[i]) stack.pop();

            nse[i] = stack.isEmpty() ? arr.length : stack.peek();

            stack.push(i);
        }

        return nse;
    }
    private int[] findPSE(int[] arr){
        int[] pse = new int[arr.length];
        Stack<Integer> stack = new Stack<>();

        for(int i = 0; i < arr.length; i++){
            while(!stack.isEmpty() && arr[stack.peek()] >= arr[i]) stack.pop();

            pse[i] = stack.isEmpty() ? -1 : stack.peek();

            stack.push(i);
        }

        return pse;
    }
}

// Approach 3
class Solution {
    public int sumSubarrayMins(int[] arr) {
        int[] nse = new int[arr.length];
        int[] pse = new int[arr.length];

        Deque<Integer> stack = new ArrayDeque<>();

        for(int i = arr.length - 1; i >= 0; i--){
            while(!stack.isEmpty() && arr[stack.peek()] > arr[i]) stack.pop();

            nse[i] = stack.isEmpty() ? arr.length : stack.peek();

            stack.push(i);
        }

        stack.clear();
        for(int i = 0; i < arr.length; i++){
            while(!stack.isEmpty() && arr[stack.peek()] >= arr[i]) stack.pop();

            pse[i] = stack.isEmpty() ? -1 : stack.peek();

            stack.push(i);
        }

        long sum = 0;
        int mod = 1000000007;
        for(int i = 0; i < arr.length; i++){
            int left = i - pse[i];
            int right = nse[i] - i;

            sum = (sum + (left * right * 1L * arr[i]) % mod) %mod; 
        }
        
        return (int)sum;
    }
}