// Sum of Subarray Ranges

// Approach 1
class Solution {
    private long sumMax(int[] arr){
        int n = arr.length;
        int[] nge = new int[n];
        int[] pge = new int[n];

        Deque<Integer> stack = new ArrayDeque<>();

        for(int i = n - 1; i >= 0; i--){
            while(!stack.isEmpty() && arr[stack.peek()] <= arr[i]) stack.pop();

            nge[i] = stack.isEmpty() ? n : stack.peek();

            stack.push(i);
        }

        stack.clear();

        for(int i = 0; i < n; i++){
            while(!stack.isEmpty() && arr[stack.peek()] < arr[i]) stack.pop();

            pge[i] = stack.isEmpty() ? -1 : stack.peek();

            stack.push(i);
        }

        long sum = 0L;
        for(int i = 0; i < n; i++){
            long left = i - pge[i];
            long right = nge[i] - i;
            sum += left * right * (long)arr[i];
        }

        return sum;
    }

    private long sumMin(int[] arr){
        int n = arr.length;
        int[] nse = new int[n];
        int[] pse = new int[n];

        Deque<Integer> stack = new ArrayDeque<>();

        for(int i = n - 1; i >= 0; i--){
            while(!stack.isEmpty() && arr[stack.peek()] >= arr[i]) stack.pop();

            nse[i] = stack.isEmpty() ? n : stack.peek();

            stack.push(i);
        }

        stack.clear();

        for(int i = 0; i < n; i++){
            while(!stack.isEmpty() && arr[stack.peek()] > arr[i]) stack.pop();

            pse[i] = stack.isEmpty() ? -1 : stack.peek();

            stack.push(i);
        }

        long sum = 0L;
        for(int i = 0; i < n; i++){
            long left = i - pse[i];
            long right = nse[i] - i;
            sum += left * right * (long)arr[i];
        }

        return sum;
    }

    public long subArrayRanges(int[] nums) {
        return sumMax(nums) - sumMin(nums);
    }
}

// Approach 2
class Solution {
    public long subArrayRanges(int[] nums) {
        long sum = 0;

        for(int i = 0; i < nums.length; i++){
            int min = nums[i];
            int max = nums[i];
            for(int j = i; j < nums.length; j++){
                min = Math.min(min, nums[j]);
                max = Math.max(max, nums[j]);
                sum += (max - min);
            }
        }

        return sum;
    }
}