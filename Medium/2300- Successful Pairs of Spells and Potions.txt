// Successful Pairs of Spells and Potions

// Approach 1
class Solution {
    private int binary(int[] arr, long target){
        int n = arr.length;
        long low = 0, high = n - 1, ans = n;
        while (low <= high) {
            long mid = low + (high - low) / 2;
            if ((long)arr[(int)mid] >= target) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return (int)ans;
    }
    public int[] successfulPairs(int[] spells, int[] potions, long success) {
        Arrays.sort(potions);
        int[] pair = new int[spells.length];

        int k = 0;
        for(int i = 0; i < spells.length; i++){
            long spell = spells[i];
            long ans = (spell + success - 1) / spell;
            int idx = binary(potions, ans);
            pair[k++] = potions.length - idx;
        }

        return pair;
    }
}

// Approach 2
class Solution {
    public int[] successfulPairs(int[] spells, int[] potions, long success) {
        int n = potions.length;
        Arrays.sort(potions);
        int[] pair = new int[spells.length];

        for(int i = 0; i < spells.length; i++){
            long spell = spells[i];
            long ans = (spell + success - 1) / spell;
            int st = 0, end = n - 1;
            while(st < end){
                int mid = (end + st) / 2;
                if(potions[mid] >= ans) end = mid;
                else st = mid + 1;
            }
            pair[i] = potions[st] >= ans ? n - st : 0;
        }

        return pair;
    }
}