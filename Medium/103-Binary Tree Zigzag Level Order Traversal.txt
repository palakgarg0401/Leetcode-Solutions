// Binary Tree Zigzag Level Order Traversal

class Solution {
    private void reverse(Queue<TreeNode> q){
        Stack<TreeNode> st = new Stack<>();

        while(!q.isEmpty()) st.push(q.poll());

        while(!st.isEmpty()) q.add(st.pop());
    }
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;

        Queue<TreeNode> q = new ArrayDeque<>();
        q.add(root);
        int level = 1;
        while(!q.isEmpty()){
            int size = q.size();
            reverse(q);
            List<Integer> list = new ArrayList<>();
            for(int i = 0; i < size; i++){
                TreeNode curr = q.poll();
                list.add(curr.val);

                if(level % 2 != 0){
                    if(curr.left != null) q.add(curr.left);
                    if(curr.right != null) q.add(curr.right);
                }
                else{
                    if(curr.right != null) q.add(curr.right);
                    if(curr.left != null) q.add(curr.left);
                }
            }
            level++;
            res.add(list);
        }

        return res;
    }
}