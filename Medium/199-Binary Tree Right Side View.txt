// Binary Tree Right Side View

// Approach 1
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null) return res;
        Queue<TreeNode> q = new ArrayDeque<>();
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> list = new ArrayList<>();
            for(int i = 0; i < size; i++){
                TreeNode curr = q.poll();
                list.add(curr.val);

                if(curr.left != null) q.add(curr.left);
                if(curr.right != null) q.add(curr.right);
            }
            res.add(list.get(list.size() - 1));
        }

        return res;
    }
}

// Approach 2
lass Solution {
    private void right(TreeNode root, int level, List<Integer> res){
        if(root == null) return;

        if(level == res.size()) res.add(root.val);

        right(root.right, level + 1, res);
        right(root.left, level + 1, res);
    }
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null) return res;
        right(root, 0, res);

        return res;
    }
}