// N-Queens

class Solution {
    private boolean isSafe(char[][] board, int row, int col, int n){
        for(int i = 0; i < row; i++) if(board[i][col] == 'Q') return false;
        for(int i=row-1, j=col+1; i>=0&&j<n; i--, j++) {
            if(board[i][j] == 'Q') return false;
        }
        for(int i=row-1, j=col-1; i>=0 && j>=0; i--, j--){
            if(board[i][j] == 'Q') return false;
        }

        return true;
    }
    private void helper(char[][] board, int row, int n, List<List<String>> res){
        if(row == n){
            List<String> list = new ArrayList<>();
            for(int i = 0; i < n; i++){
                StringBuilder sb = new StringBuilder();
                for(int j = 0; j < n; j++){
                    sb.append(board[i][j]);
                }
                list.add(sb.toString());
            }
            res.add(list);
            return;
        }

        for(int i = 0; i < n; i++){
            if(isSafe(board, row, i, n)){
                board[row][i] = 'Q';
                helper(board, row + 1, n, res);
                board[row][i] = '.';
            }
        }
        return;
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        char[][] board = new char[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++) board[i][j] = '.';
        }
        helper(board, 0, n, res);
        return res;
    }
}